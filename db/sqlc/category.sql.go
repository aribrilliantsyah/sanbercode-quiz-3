// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: category.sql

package db

import (
	"context"
	"database/sql"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO categories (name, created_at, created_by)
VALUES ($1, $2, $3)
RETURNING id, name, created_at, created_by, modified_at, modified_by
`

type CreateCategoryParams struct {
	Name      string         `json:"name"`
	CreatedAt sql.NullTime   `json:"created_at"`
	CreatedBy sql.NullString `json:"created_by"`
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (Category, error) {
	row := q.queryRow(ctx, q.createCategoryStmt, createCategory, arg.Name, arg.CreatedAt, arg.CreatedBy)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.ModifiedAt,
		&i.ModifiedBy,
	)
	return i, err
}

const deleteCategory = `-- name: DeleteCategory :exec
DELETE FROM categories
WHERE id = $1
`

func (q *Queries) DeleteCategory(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteCategoryStmt, deleteCategory, id)
	return err
}

const getCategory = `-- name: GetCategory :one
SELECT id, name, created_at, created_by, modified_at, modified_by FROM categories
WHERE id = $1
`

func (q *Queries) GetCategory(ctx context.Context, id int64) (Category, error) {
	row := q.queryRow(ctx, q.getCategoryStmt, getCategory, id)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.ModifiedAt,
		&i.ModifiedBy,
	)
	return i, err
}

const listCategories = `-- name: ListCategories :many
SELECT id, name, created_at, created_by, modified_at, modified_by FROM categories
ORDER BY id
LIMIT $1 OFFSET $2
`

type ListCategoriesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCategories(ctx context.Context, arg ListCategoriesParams) ([]Category, error) {
	rows, err := q.query(ctx, q.listCategoriesStmt, listCategories, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.ModifiedAt,
			&i.ModifiedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCategory = `-- name: UpdateCategory :one
UPDATE categories
SET name = $2, modified_at = $3, modified_by = $4
WHERE id = $1
RETURNING id, name, created_at, created_by, modified_at, modified_by
`

type UpdateCategoryParams struct {
	ID         int64          `json:"id"`
	Name       string         `json:"name"`
	ModifiedAt sql.NullTime   `json:"modified_at"`
	ModifiedBy sql.NullString `json:"modified_by"`
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (Category, error) {
	row := q.queryRow(ctx, q.updateCategoryStmt, updateCategory,
		arg.ID,
		arg.Name,
		arg.ModifiedAt,
		arg.ModifiedBy,
	)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.ModifiedAt,
		&i.ModifiedBy,
	)
	return i, err
}
